---
import { Image } from "astro:assets";
import P1 from "../../../assets/img/SliderPrincipal/P1.webp";
import P2 from "../../../assets/img/SliderPrincipal/P2.webp";

const mangas = [
  {
    id: 'gokurakugai',
    title: 'Gokurakugai, un luminoso y bullicioso barrio obrero con un lado oscuro oculto.',
    name: 'GOKURAKUGAI',
    author: 'Yuto Sano',
    url: '/series/GOKURAKUGAI/gokurakugai',
    image: P1,
    color: 'rgb(185, 54, 179)'
  },
  {
    id: 'manga2',
    title: 'Un niño es incriminado por asesinato y arrojado desde el borde de una ciudad flotante al abismo.',
    name: 'GACHIAKUTA',
    author: 'Kei Urana',
    url: '/series/MANGA2/manga2',
    image: P2,
    color: 'rgb(0, 119, 255)'
  },
];
---

<div class="home-landing">
  <section class="highlights-slider">
    <div class="highlights-slider__items">
      {mangas.map((manga, index) => (
        <div 
          data-index={index} 
          class="highlights-slider__item"
          data-manga-info={JSON.stringify({
            title: manga.title,
            name: manga.name,
            author: manga.author,
            url: manga.url
          })}
        >
          <a 
            href={manga.url} 
            class="highlights-slider__item-link nts-app Poster-contenedor-hover" 
            target="_self"
          >
            <Image 
              class="highlights-slider__large-image" 
              src={manga.image} 
              alt={manga.name}
              width={700}
              height={560}
              sizes="(max-width: 992px) 100vw, 700px"
              fetchpriority={index === 0 ? "high" : undefined}
              loading={index === 0 ? "eager" : "lazy"}
            />
            <Image 
              class="highlights-slider__small-image" 
              src={manga.image} 
              alt={manga.name}
              width={350}
              height={280}
              sizes="(max-width: 992px) 50vw, 350px"
              fetchpriority={index === 0 ? "high" : undefined}
              loading={index === 0 ? "eager" : "lazy"}
            />
            <div class="colorize" style={`background-color: ${manga.color};`}></div>
          </a>
          <div class="highlights-slider__contents">
            <div class="highlights-slider__contents-wrapper"></div>
          </div>
        </div>
      ))}
    </div>

    <div class="highlights-panel">
      <div class="highlights-tracker">
        <div class="highlights-scrollbar">
          <div class="highlights-scrollbar-thumb"></div>
        </div>
        <div class="highlights-tracker__index body-s">1 / {mangas.length}</div>
      </div>

      <div class="highlights-controls">
        <button id="prevBtn" aria-label="Anterior">
          <svg style="transform:rotate(180deg)" class="nts-icon--inverted KITH-icono-ss" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 600">
            <path d="M150 117l60-61 240 244-240 244-60-61 180-183-180-183z"></path>
          </svg>
        </button>

        <button id="playBtn" aria-label="Reproducir/Pausar">
          <svg id="icon-play" class="nts-icon--inverted KITH-icono-ss" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 600">
            <title>Play</title>
            <g transform="translate(-772 -385)">
              <g transform="translate(0 43)">
                <g transform="translate(18)">
                  <path d="M1260.4 651.3L882.8 861.2c-4.4 2.4-8.2 2.7-11.2 1-3.1-1.7-4.6-5.1-4.6-10.2V433.2c0-4.8 1.5-8.2 4.6-10.2 3.1-2 6.8-1.7 11.2 1l377.6 210c4.4 2.4 6.6 5.3 6.6 8.7 0 3.3-2.2 6.2-6.6 8.6z"></path>
                </g>
              </g>
            </g>
          </svg>
          <svg id="icon-pause" class="nts-icon--inverted KITH-icono-ss" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 600" style="display: none;">
            <path d="M143.2 118.36h101.19a10 10 0 0 1 10 10v343.32a10 10 0 0 1-10 10H143.2a10 10 0 0 1-9.95-10V128.32a10 10 0 0 1 9.95-9.96zm211.91 0H456.3a10 10 0 0 1 9.95 10v343.32a10 10 0 0 1-9.95 10H355.11a10 10 0 0 1-9.95-10V128.32a10 10 0 0 1 9.95-9.96z"/>
          </svg>
        </button>
        
        <button id="nextBtn" aria-label="Siguiente">
          <svg class="nts-icon--inverted KITH-icono-ss" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 600">
            <path d="M150 117l60-61 240 244-240 244-60-61 180-183-180-183z"></path>
          </svg>
        </button>
      </div>
    </div>
  </section>

  <div class="ArticuloPrincipal-infoBox">
    <h2>{mangas[0].title}</h2>
    <h1>{mangas[0].name}</h1>
    <div class="ArticuloPrincipal-infoBox-footer">
      <div class="ArticuloPrincipal-autor">{mangas[0].author}</div>
      <a href={mangas[0].url}>Ver más información</a>
    </div>
  </div>
</div>

<script>
  class MangaSlider {
    private slides: NodeListOf<HTMLElement>;
    private indexDisplay: HTMLElement | null;
    private infoBox: HTMLElement | null;
    private scrollbarThumb: HTMLElement | null;
    private iconPlay: SVGElement | null;
    private iconPause: SVGElement | null;
    
    private currentIndex = 0;
    private autoplay = true;
    private interval: number | undefined;
    private totalSlides: number;
    private isTransitioning = false;

    constructor() {
      this.slides = document.querySelectorAll<HTMLElement>(".highlights-slider__item");
      this.indexDisplay = document.querySelector(".highlights-tracker__index");
      this.infoBox = document.querySelector('.ArticuloPrincipal-infoBox');
      this.scrollbarThumb = document.querySelector<HTMLElement>(".highlights-scrollbar-thumb");
      this.iconPlay = document.querySelector<SVGElement>("#icon-play");
      this.iconPause = document.querySelector<SVGElement>("#icon-pause");
      this.totalSlides = this.slides.length;
      
      this.init();
    }

    private init(): void {
      if (this.totalSlides === 0) return;
      
      this.setupSlides();
      this.bindEvents();
      this.showSlide(0);
      this.updateIcon();
      
      setTimeout(() => {
        this.enableTransitions();
        this.startAutoplay();
      }, 100);
    }

    private setupSlides(): void {
      this.slides.forEach((slide, i) => {
        slide.style.position = "absolute";
        slide.style.top = "0";
        slide.style.left = "0";
        slide.style.width = "100%";
        slide.style.height = "100%";
        slide.style.willChange = "transform";
        slide.style.transition = "none";
        slide.style.transform = `translateX(${(i - 0) * 100}%)`;
        slide.style.opacity = i === 0 ? "1" : "0"; 
      });
    }

    private enableTransitions(): void {
      this.slides.forEach((slide) => {
        slide.style.transition = "transform 1s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.5s ease";
      });
    }

    private bindEvents(): void {
      const prevBtn = document.getElementById("prevBtn");
      const nextBtn = document.getElementById("nextBtn");
      const playBtn = document.getElementById("playBtn");

      prevBtn?.addEventListener("click", () => this.goToPrevious());
      nextBtn?.addEventListener("click", () => this.goToNext());
      playBtn?.addEventListener("click", () => this.toggleAutoplay());

      const slider = document.querySelector('.highlights-slider');
      slider?.addEventListener('mouseenter', () => this.pauseOnHover());
      slider?.addEventListener('mouseleave', () => this.resumeOnLeave());

      document.addEventListener('keydown', (e) => this.handleKeyboard(e));
    }

    private showSlide(index: number): void {
      if (this.isTransitioning) return;

      this.isTransitioning = true;
      this.currentIndex = index;

      this.slides.forEach((slide, i) => {
        slide.style.transform = `translateX(${(i - index) * 100}%)`;
        slide.style.opacity = "1";
      });

      this.updateInfoBox(index);
      this.updateProgress(index);

      setTimeout(() => {
        this.slides.forEach((slide, i) => {
          slide.style.opacity = i === index ? "1" : "0";
        });
        this.isTransitioning = false;
      }, 1000);
    }

    private updateInfoBox(index: number): void {
      const slide = this.slides[index];
      const mangaInfo = slide?.dataset.mangaInfo;
      
      if (mangaInfo && this.infoBox) {
        try {
          const info = JSON.parse(mangaInfo);
          this.infoBox.innerHTML = `
            <h2>${info.title}</h2>
            <h1>${info.name}</h1>
            <div class="ArticuloPrincipal-infoBox-footer">
              <div class="ArticuloPrincipal-autor">${info.author}</div>
              <a href="${info.url}">Ver más información</a>
            </div>
          `;
        } catch (e) {
          console.error('Error parsing manga info:', e);
        }
      }
    }

    private updateProgress(index: number): void {
      if (this.indexDisplay) {
        this.indexDisplay.textContent = `${index + 1} / ${this.totalSlides}`;
      }

      if (this.scrollbarThumb) {
        const width = (1 / this.totalSlides) * 100;
        const left = index * width;
        this.scrollbarThumb.style.width = `${width}%`;
        this.scrollbarThumb.style.left = `${left}%`;
      }
    }

    private goToPrevious(): void {
      const newIndex = (this.currentIndex - 1 + this.totalSlides) % this.totalSlides;
      this.showSlide(newIndex);
      this.resetAutoplay();
    }

    private goToNext(): void {
      const newIndex = (this.currentIndex + 1) % this.totalSlides;
      this.showSlide(newIndex);
      this.resetAutoplay();
    }

    private startAutoplay(): void {
      if (this.totalSlides <= 1) return;
      this.stopAutoplay();
      this.interval = window.setInterval(() => this.goToNext(), 6000);
    }

    private stopAutoplay(): void {
      if (this.interval !== undefined) {
        clearInterval(this.interval);
        this.interval = undefined;
      }
    }

    private resetAutoplay(): void {
      if (this.autoplay) {
        this.startAutoplay();
      }
    }

    private toggleAutoplay(): void {
      this.autoplay = !this.autoplay;
      this.updateIcon();
      this.autoplay ? this.startAutoplay() : this.stopAutoplay();
    }

    private updateIcon(): void {
      if (this.iconPlay && this.iconPause) {
        this.iconPlay.style.display = this.autoplay ? "none" : "inline";
        this.iconPause.style.display = this.autoplay ? "inline" : "none";
      }
    }

    private pauseOnHover(): void {
      if (this.autoplay) {
        this.stopAutoplay();
      }
    }

    private resumeOnLeave(): void {
      if (this.autoplay) {
        this.startAutoplay();
      }
    }

    private handleKeyboard(e: KeyboardEvent): void {
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }

      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          this.goToPrevious();
          break;
        case 'ArrowRight':
          e.preventDefault();
          this.goToNext();
          break;
        case ' ':
          e.preventDefault();
          this.toggleAutoplay();
          break;
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new MangaSlider();
  });
</script>